/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/lxoQVts8vhT
 */
"use client";
import React, { useState, useEffect } from "react";
import {
  CardTitle,
  CardDescription,
  CardHeader,
  CardContent,
  CardFooter,
  Card,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useFormState, useFormStatus } from "react-dom";
import { Input } from "@/components/ui/input";
import { motion } from "framer-motion";
import { WelcomeOnboard } from "../component/WelcomeOnboard";
import styles from "./styles.module.css";
import { Progress } from "../ui/progress";
import { InterestsCard } from "../component/interests-card";
import { SpinnerRoundFilled } from "spinners-react";
import { createUser } from "@/src/app/actions/onboardingActions";

interface UserData {
  family_name: string | null;
  given_name: string | null;
  picture: string | null;
  email: string | null;
  id: string | null;
}
interface onboardingComponentProps {
  userData?: UserData;
}

const initialState = {
  message: "",
};

export default function OnboardingComponent({
  userData,
}: onboardingComponentProps) {
  const totalSteps = 4;
  const [currentCard, setCurrentCard] = useState(1);
  const [institution, setInstitution] = useState("");
  const [inputInterests, setInputInterests] = useState<string[]>([]);
  const [selectedInterests, setSelectedInterests] = useState<string[]>([]);
  const [major, setMajor] = useState("");

  const interests = [...new Set([...selectedInterests, ...inputInterests])];

  const [formUserData, setFormUserData] = useState({});

  const nextCard = (e: any) => {
    e.preventDefault();

    console.log("\n📜formUserData: ", formUserData, "\n");
    setCurrentCard((prevCard) => prevCard + 1);
  };

  const prevCard = () => {
    setCurrentCard((prevCard) => prevCard - 1);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const interests = e.target.value.split(",");
    const sanitizedInterests: string[] = interests
      .map((interest) => interest.trim())
      .filter((interest) => interest !== "");
    setFormUserData({
        ...formUserData,
        inputIntrests: sanitizedInterests,
      });
    setInputInterests(sanitizedInterests);
  };

const handleInterestSelect = (interest: string) => {
  const sanitizedInterest = interest.trim();
  if (sanitizedInterest !== "") {
    setSelectedInterests((prevInterests) => {
      let newInterests;
      if (prevInterests.includes(sanitizedInterest)) {
        // If the interest is already selected, remove it from the array
        newInterests = prevInterests.filter((i) => i !== sanitizedInterest);
      } else {
        // If the interest is not selected, add it to the array
        newInterests = [...prevInterests, sanitizedInterest];
      }

      // Update formUserData with the new interests
      setFormUserData({
        ...formUserData,
        selectedInterests: newInterests,
      });

      return newInterests;
    });
  }
};

  const insitutions = [
    "University of Lagos",
    "University of Ibadan",
    "University of Benin",
    "University of Port Harcourt",
    "University of Abuja",
  ];

  const variants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
  };

  const [state, formAction] = useFormState(createUser, initialState);

  return (
    <div className={`${styles.wrapper}`}>
      <Progress
        className={`${styles.progress} mb-8`}
        max={totalSteps}
        value={(currentCard / totalSteps) * 100}
      />

      <form action={formAction}>
        <motion.div
          initial="hidden"
          animate="visible"
          exit={"hidden"}
          variants={variants}
        >
          {currentCard === 1 && (
            <motion.div variants={variants}>
              <WelcomeOnboard userData={userData}>
                <p role="status">{state?.message}</p>
                <Button size="sm" variant={"card"} onClick={nextCard}>
                  Start process
                  <svg
                    width="5"
                    height="9"
                    viewBox="0 0 5 9"
                    className="ms-3 transform rotate-180"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M0.122189 4.78942L4.28839 8.88012C4.3271 8.91813 4.37305 8.94827 4.42363 8.96884C4.4742 8.98941 4.52841 9 4.58315 9C4.63789 9 4.6921 8.98941 4.74267 8.96884C4.79325 8.94827 4.8392 8.91813 4.87791 8.88012C4.91662 8.84211 4.94732 8.79699 4.96827 8.74733C4.98922 8.69768 5 8.64445 5 8.5907C5 8.53695 4.98922 8.48373 4.96827 8.43407C4.94732 8.38441 4.91662 8.33929 4.87791 8.30128L1.00594 4.5L4.87791 0.698715C4.95608 0.621957 5 0.51785 5 0.409298C5 0.300745 4.95608 0.196639 4.87791 0.11988C4.79973 0.0431223 4.6937 8.08779e-10 4.58315 0C4.47259 -8.08779e-10 4.36656 0.0431223 4.28839 0.11988L0.122189 4.21058C0.0834528 4.24857 0.0527232 4.29369 0.031757 4.34335C0.0107909 4.39301 6.25167e-08 4.44624 6.25167e-08 4.5C6.25167e-08 4.55376 0.0107909 4.60699 0.031757 4.65665C0.0527232 4.70631 0.0834528 4.75143 0.122189 4.78942Z"
                      fill="white"
                    />
                  </svg>
                </Button>
              </WelcomeOnboard>
            </motion.div>
          )}
        </motion.div>

        {currentCard === 2 && (
          <motion.div
            initial="hidden"
            animate="visible"
            exit={"hidden"}
            variants={variants}
          >
            <Card className="w-full max-w-md mx-auto">
              <div className="flex flex-col h-full">
                <CardHeader className="flex-shrink-0">
                  <CardTitle className="text-xl">Institution Details</CardTitle>
                  <CardDescription>
                    Tell us which school you go to and your major
                  </CardDescription>
                </CardHeader>
                <CardContent className="flex flex-col justify-center space-y-4">
                  <Input
                    type="text"
                    name="major"
                    id="major"
                    placeholder="Course Major"
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                      setMajor(e.target.value);
                      setFormUserData({
                        ...formUserData,
                        [e.target.name]: e.target.value,
                      });
                    }}
                  />
                  <Input
                    name="institution"
                    id="institution"
                    placeholder="insitution"
                    variant="dropdown"
                    options={insitutions}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                      setInstitution(e.target.value);
                      setFormUserData({
                        ...formUserData,
                        [e.target.name]: e.target.value,
                      });
                    }}
                  />
                </CardContent>
                <CardFooter className="mt-auto flex gap-4">
                  <Button size="sm" variant={"card"} onClick={nextCard}>
                    Next
                    <svg
                      width="5"
                      height="9"
                      viewBox="0 0 5 9"
                      className="ms-3 transform rotate-180"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M0.122189 4.78942L4.28839 8.88012C4.3271 8.91813 4.37305 8.94827 4.42363 8.96884C4.4742 8.98941 4.52841 9 4.58315 9C4.63789 9 4.6921 8.98941 4.74267 8.96884C4.79325 8.94827 4.8392 8.91813 4.87791 8.88012C4.91662 8.84211 4.94732 8.79699 4.96827 8.74733C4.98922 8.69768 5 8.64445 5 8.5907C5 8.53695 4.98922 8.48373 4.96827 8.43407C4.94732 8.38441 4.91662 8.33929 4.87791 8.30128L1.00594 4.5L4.87791 0.698715C4.95608 0.621957 5 0.51785 5 0.409298C5 0.300745 4.95608 0.196639 4.87791 0.11988C4.79973 0.0431223 4.6937 8.08779e-10 4.58315 0C4.47259 -8.08779e-10 4.36656 0.0431223 4.28839 0.11988L0.122189 4.21058C0.0834528 4.24857 0.0527232 4.29369 0.031757 4.34335C0.0107909 4.39301 6.25167e-08 4.44624 6.25167e-08 4.5C6.25167e-08 4.55376 0.0107909 4.60699 0.031757 4.65665C0.0527232 4.70631 0.0834528 4.75143 0.122189 4.78942Z"
                        fill="white"
                      />
                    </svg>
                  </Button>
                  <SubmitButton />
                </CardFooter>
              </div>
            </Card>
          </motion.div>
        )}

        {currentCard === 3 && (
          <motion.div
            initial="hidden"
            animate="visible"
            exit={"hidden"}
            variants={variants}
          >
            <InterestsCard>
              <CardContent className="flex flex-col justify-center space-y-4 w-full max-w-sm">
                <Input
                  name="inputInterests"
                  placeholder="example: AI, ML"
                  onChange={handleInputChange}
                />
                <div className="flex flex-wrap gap-2 mt-4">
                  <Button
                    type="button"
                    name="AI & ML"
                    size={"tagSize"}
                    variant={"tag"}
                    isSelected={selectedInterests.includes("AI & ML")}
                    onClick={() => handleInterestSelect("AI & ML")}
                  >
                    AI & ML
                  </Button>
                  <Button
                    type="button"
                    name="Javascript"
                    size={"tagSize"}
                    variant={"tag"}
                    isSelected={selectedInterests.includes("Javascript")}
                    onClick={() => handleInterestSelect("Javascript")}
                  >
                    Javascript
                  </Button>
                  <Button
                    size={"tagSize"}
                    type="button"
                    name="React"
                    variant={"tag"}
                    isSelected={selectedInterests.includes("React")}
                    onClick={() => handleInterestSelect("React")}
                  >
                    React
                  </Button>
                  <Button
                    type="button"
                    name="Next.js"
                    size={"tagSize"}
                    variant={"tag"}
                    isSelected={selectedInterests.includes("Next.js")}
                    onClick={() => handleInterestSelect("Next.js")}
                  >
                    Next.js
                  </Button>
                  <Button
                    size={"tagSize"}
                    variant={"tag"}
                    type="button"
                    name="Programming"
                    isSelected={selectedInterests.includes("Programming")}
                    onClick={() => handleInterestSelect("Programming")}
                  >
                    Programming
                  </Button>
                  <Button
                    size={"tagSize"}
                    variant={"tag"}
                    type="button"
                    name="Computer Vision"
                    isSelected={selectedInterests.includes("Computer Vision")}
                    onClick={() => handleInterestSelect("Computer Vision")}
                  >
                    Computer Vision
                  </Button>
                </div>
              </CardContent>
              <CardFooter className="mt-auto flex gap-4">
                <Button size="sm" variant="card" onClick={prevCard}>
                  <svg
                    width="5"
                    height="9"
                    viewBox="0 0 5 9"
                    className="me-3"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M0.122189 4.78942L4.28839 8.88012C4.3271 8.91813 4.37305 8.94827 4.42363 8.96884C4.4742 8.98941 4.52841 9 4.58315 9C4.63789 9 4.6921 8.98941 4.74267 8.96884C4.79325 8.94827 4.8392 8.91813 4.87791 8.88012C4.91662 8.84211 4.94732 8.79699 4.96827 8.74733C4.98922 8.69768 5 8.64445 5 8.5907C5 8.53695 4.98922 8.48373 4.96827 8.43407C4.94732 8.38441 4.91662 8.33929 4.87791 8.30128L1.00594 4.5L4.87791 0.698715C4.95608 0.621957 5 0.51785 5 0.409298C5 0.300745 4.95608 0.196639 4.87791 0.11988C4.79973 0.0431223 4.6937 8.08779e-10 4.58315 0C4.47259 -8.08779e-10 4.36656 0.0431223 4.28839 0.11988L0.122189 4.21058C0.0834528 4.24857 0.0527232 4.29369 0.031757 4.34335C0.0107909 4.39301 6.25167e-08 4.44624 6.25167e-08 4.5C6.25167e-08 4.55376 0.0107909 4.60699 0.031757 4.65665C0.0527232 4.70631 0.0834528 4.75143 0.122189 4.78942Z"
                      fill="white"
                    />
                  </svg>
                  Correct something
                </Button>
                <Button size="sm" onClick={nextCard}>
                  Next
                  <svg
                    width="5"
                    height="9"
                    viewBox="0 0 5 9"
                    className="ms-3 transform rotate-180"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M0.122189 4.78942L4.28839 8.88012C4.3271 8.91813 4.37305 8.94827 4.42363 8.96884C4.4742 8.98941 4.52841 9 4.58315 9C4.63789 9 4.6921 8.98941 4.74267 8.96884C4.79325 8.94827 4.8392 8.91813 4.87791 8.88012C4.91662 8.84211 4.94732 8.79699 4.96827 8.74733C4.98922 8.69768 5 8.64445 5 8.5907C5 8.53695 4.98922 8.48373 4.96827 8.43407C4.94732 8.38441 4.91662 8.33929 4.87791 8.30128L1.00594 4.5L4.87791 0.698715C4.95608 0.621957 5 0.51785 5 0.409298C5 0.300745 4.95608 0.196639 4.87791 0.11988C4.79973 0.0431223 4.6937 8.08779e-10 4.58315 0C4.47259 -8.08779e-10 4.36656 0.0431223 4.28839 0.11988L0.122189 4.21058C0.0834528 4.24857 0.0527232 4.29369 0.031757 4.34335C0.0107909 4.39301 6.25167e-08 4.44624 6.25167e-08 4.5C6.25167e-08 4.55376 0.0107909 4.60699 0.031757 4.65665C0.0527232 4.70631 0.0834528 4.75143 0.122189 4.78942Z"
                      fill="black"
                    />
                  </svg>
                </Button>
              </CardFooter>
            </InterestsCard>
          </motion.div>
        )}

        {currentCard === 4 && (
          <motion.div
            initial="hidden"
            animate="visible"
            exit={"hidden"}
            variants={variants}
          >
            <Card className="w-full max-w-md mx-auto">
              <div className="flex flex-col h-full">
                <CardHeader className="flex-shrink-0">
                  <CardTitle className="text-xl">Review your data</CardTitle>
                  <CardDescription>
                    Make sure everything looks good before submitting.
                  </CardDescription>
                  <p>{state?.message}</p>
                </CardHeader>
                <CardContent className="flex flex-col justify-center space-y-4">
                  <div className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      {/* ... */}
                      <div className="space-y-1.5">
                        <label
                          className="inline-block text-sm font-medium text-gray-500 dark:text-gray-400"
                          htmlFor="review-institution"
                        >
                          First name
                        </label>
                        <p className="text-sm leading-none">
                          {userData?.given_name?.toLocaleLowerCase()}
                        </p>
                        <UserIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                      </div>

                      <div className="space-y-1.5">
                        <label
                          className="inline-block text-sm font-medium text-gray-500 dark:text-gray-400"
                          htmlFor="review-institution"
                        >
                          Last name
                        </label>
                        <p className="text-sm leading-none">
                          {userData?.family_name?.toLocaleLowerCase()}
                        </p>
                        <UserIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                      </div>

                      <div className="space-y-1.5">
                        <label
                          className="inline-block text-sm font-medium text-gray-500 dark:text-gray-400"
                          htmlFor="review-institution"
                        >
                          Institution
                        </label>
                        <p className="text-sm leading-none">{institution}</p>
                        <SchoolIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                      </div>

                      <div className="space-y-1.5">
                        <label
                          className="inline-block text-sm font-medium text-gray-500 dark:text-gray-400"
                          htmlFor="review-major"
                        >
                          Major
                        </label>
                        <p className="text-sm leading-none">
                          {major.toLocaleLowerCase()}
                        </p>
                        <GraduationCapIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                      </div>

                      <div className="space-y-1.5 col-span-2">
                        <label
                          className="inline-block text-sm font-medium text-gray-500 dark:text-gray-400"
                          htmlFor="review-major"
                        >
                          Email
                        </label>
                        <p className="text-sm leading-none">
                          {userData?.email}
                        </p>
                        <MailIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                      </div>
                      <div className="space-y-1.5 col-span-2">
                        <label
                          className="inline-block text-sm font-medium text-gray-500 dark:text-gray-400"
                          htmlFor="review-major"
                        >
                          Interests
                        </label>
                        <p className="text-sm leading-6">
                          {interests.join(", ")}
                        </p>
                        <HeartIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                      </div>
                      {/* ... */}
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="mt-auto flex gap-4 flex-wrap">
                  <Button size="sm" variant="card" onClick={prevCard}>
                    {/* ... */}
                    Correct something
                  </Button>
                  <SubmitButton />
                </CardFooter>
              </div>
            </Card>
          </motion.div>
        )}
      </form>
    </div>
  );
}

function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    <Button size="sm" variant={"card"} type="submit">
      Data All good {pending ? <SpinnerRoundFilled size={35} /> : "👍"}
    </Button>
  );
}

function GraduationCapIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M22 10v6M2 10l10-5 10 5-10 5z" />
      <path d="M6 12v5c3 3 9 3 12 0v-5" />
    </svg>
  );
}

function HeartIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
    </svg>
  );
}

function MailIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="20" height="16" x="2" y="4" rx="2" />
      <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" />
    </svg>
  );
}

function SchoolIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m4 6 8-4 8 4" />
      <path d="m18 10 4 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-8l4-2" />
      <path d="M14 22v-4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v4" />
      <path d="M18 5v17" />
      <path d="M6 5v17" />
      <circle cx="12" cy="9" r="2" />
    </svg>
  );
}

function UserIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
      <circle cx="12" cy="7" r="4" />
    </svg>
  );
}
